name: Backend CI

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: tunelar_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Cache Maven packages
      uses: actions/cache@v3.3.2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Check MySQL Connection
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -proot -e "SHOW DATABASES; USE tunelar_test;"
    
    - name: Set up test resources
      run: |
        cd backend
        mkdir -p src/test/resources
        
        # Create schema.sql
        cat > src/test/resources/schema.sql << 'EOF'
        -- Roles Table
        CREATE TABLE IF NOT EXISTS roles (
            id BIGINT AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(50) NOT NULL UNIQUE,
            description VARCHAR(255)
        );

        -- Users Table
        CREATE TABLE IF NOT EXISTS users (
            id BIGINT AUTO_INCREMENT PRIMARY KEY,
            username VARCHAR(50) NOT NULL UNIQUE,
            email VARCHAR(100) NOT NULL UNIQUE,
            password VARCHAR(255) NOT NULL,
            name VARCHAR(100),
            profile_picture VARCHAR(255),
            bio TEXT,
            created_at TIMESTAMP NOT NULL,
            updated_at TIMESTAMP
        );

        -- User-Role Junction Table
        CREATE TABLE IF NOT EXISTS users_roles (
            user_id BIGINT NOT NULL,
            role_id BIGINT NOT NULL,
            PRIMARY KEY (user_id, role_id),
            FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
            FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE
        );

        -- Insert default roles
        INSERT INTO roles (name, description) VALUES ('ROLE_USER', 'Regular user with basic privileges');
        INSERT INTO roles (name, description) VALUES ('ROLE_PRODUCER', 'Can upload and manage audio samples');
        INSERT INTO roles (name, description) VALUES ('ROLE_MODERATOR', 'Can moderate content and users');
        INSERT INTO roles (name, description) VALUES ('ROLE_ADMIN', 'Has full administrative privileges');
        EOF
        
        # Create application-test.properties
        cat > src/test/resources/application-test.properties << 'EOF'
        # Test Database Configuration
        spring.datasource.url=jdbc:mysql://localhost:3306/tunelar_test?allowPublicKeyRetrieval=true&useSSL=false
        spring.datasource.username=root
        spring.datasource.password=root

        # Database initialization
        spring.sql.init.mode=always
        spring.sql.init.schema-locations=classpath:schema.sql

        # Hibernate Configuration
        spring.jpa.hibernate.ddl-auto=none
        spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
        spring.jpa.show-sql=true

        # Logging for troubleshooting
        logging.level.org.hibernate.SQL=DEBUG
        logging.level.org.springframework.test=DEBUG
        EOF
    
    - name: Build with Maven (skip tests)
      run: |
        cd backend
        ./mvnw -B clean package -DskipTests
      env:
        MAVEN_OPTS: "-Xmx2048m"
    
    - name: Run Tests
      run: |
        cd backend
        ./mvnw -B test -Dspring.profiles.active=test
      env:
        MAVEN_OPTS: "-Xmx2048m"