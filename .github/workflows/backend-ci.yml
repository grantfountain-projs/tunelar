name: Backend CI

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Add H2 database dependency to pom.xml
      run: |
        cd backend
        # Add H2 dependency if it doesn't exist
        if ! grep -q "<groupId>com.h2database</groupId>" pom.xml; then
          sed -i '/<dependencies>/a \
          <dependency>\n            <groupId>com.h2database</groupId>\n            <artifactId>h2</artifactId>\n            <scope>test</scope>\n        </dependency>' pom.xml
        fi
    
    - name: Set up test resources
      run: |
        cd backend
        mkdir -p src/test/resources
        mkdir -p src/test/java/com/tunelar/backend/config
        
        # Create MockMvcTestConfig.java
        cat > src/test/java/com/tunelar/backend/config/MockMvcTestConfig.java << 'EOF'
        package com.tunelar.backend.config;

        import com.tunelar.backend.repository.RoleRepository;
        import com.tunelar.backend.repository.UserRepository;
        import com.tunelar.backend.security.JwtAuthenticationEntryPoint;
        import com.tunelar.backend.security.JwtAuthenticationFilter;
        import com.tunelar.backend.security.JwtTokenProvider;
        import com.tunelar.backend.service.AuthService;
        import org.springframework.boot.test.mock.mockito.MockBean;
        import org.springframework.context.annotation.Bean;
        import org.springframework.context.annotation.Configuration;
        import org.springframework.context.annotation.Primary;
        import org.springframework.context.annotation.Profile;
        import org.springframework.security.authentication.AuthenticationManager;
        import org.springframework.security.config.annotation.web.builders.HttpSecurity;
        import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
        import org.springframework.security.core.userdetails.User;
        import org.springframework.security.core.userdetails.UserDetails;
        import org.springframework.security.core.userdetails.UserDetailsService;
        import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
        import org.springframework.security.crypto.password.PasswordEncoder;
        import org.springframework.security.provisioning.InMemoryUserDetailsManager;
        import org.springframework.security.web.SecurityFilterChain;

        @Configuration
        @Profile("test")
        public class MockMvcTestConfig {

            @MockBean
            private JwtAuthenticationFilter jwtAuthenticationFilter;

            @MockBean
            private JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;

            @MockBean
            private JwtTokenProvider jwtTokenProvider;
            
            @MockBean
            private UserRepository userRepository;
            
            @MockBean
            private RoleRepository roleRepository;
            
            @Bean
            public PasswordEncoder passwordEncoder() {
                return new BCryptPasswordEncoder();
            }

            @Bean
            @Primary
            public UserDetailsService userDetailsService() {
                UserDetails adminUser = User.builder()
                        .username("admin")
                        .password(passwordEncoder().encode("admin123"))
                        .roles("ADMIN")
                        .build();
                
                UserDetails modUser = User.builder()
                        .username("mod")
                        .password(passwordEncoder().encode("password"))
                        .roles("MOD")
                        .build();
                
                UserDetails prodUser = User.builder()
                        .username("prod")
                        .password(passwordEncoder().encode("password"))
                        .roles("PROD")
                        .build();
                
                return new InMemoryUserDetailsManager(adminUser, modUser, prodUser);
            }

            @Bean
            @Primary
            public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
                // Disable CSRF and frame options for testing
                http.csrf(AbstractHttpConfigurer::disable)
                    .authorizeHttpRequests(auth -> 
                        auth.requestMatchers("/api/auth/**").permitAll()
                            .anyRequest().authenticated()
                    );
                
                return http.build();
            }
            
            @Bean
            @Primary
            public AuthenticationManager authenticationManager() {
                return authentication -> authentication; // This is a no-op authentication manager for testing
            }
        }
        EOF
        
        # Create application-test.properties
        cat > src/test/resources/application-test.properties << EOF
        # Use H2 in-memory database for tests with a unique DB name
        spring.datasource.url=jdbc:h2:mem:testdb_\${random.uuid};DB_CLOSE_DELAY=-1;MODE=MySQL
        spring.datasource.username=sa
        spring.datasource.password=
        spring.datasource.driver-class-name=org.h2.Driver

        # JPA Configuration
        spring.jpa.hibernate.ddl-auto=create-drop
        spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
        spring.jpa.show-sql=true

        # JWT Configuration
        app.jwt-secret=testsecretkey12345678901234567890
        app.jwt-expiration-milliseconds=86400000

        # Admin user password for tests
        app.admin-user-password=admin123

        # Turn off security autoconfiguration for tests
        spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration

        # Disable Hibernate validator in tests
        spring.jpa.properties.hibernate.validator.apply_to_ddl=false
        
        # Disable full SQL logging in tests
        logging.level.org.hibernate.SQL=ERROR
        logging.level.org.hibernate.type.descriptor.sql.BasicBinder=ERROR
        EOF
    
    - name: Build with Maven
      run: |
        cd backend
        ./mvnw -B clean package -DskipTests
      env:
        MAVEN_OPTS: "-Xmx2048m"
    
    - name: Run Tests
      run: |
        cd backend
        ./mvnw -B test -Dspring.profiles.active=test
      env:
        MAVEN_OPTS: "-Xmx2048m"
    
    - name: Upload Test Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-test-reports
        path: backend/target/surefire-reports